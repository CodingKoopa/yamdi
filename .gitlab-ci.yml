# Define the Docker in Docker template.
.dind:
  variables:
    # Set the Docker host to the network connection to the dind service instead of the usual socket.
    DOCKER_HOST: tcp://docker:2375/
  # Run in the official Docker image.
  image: docker
  services:
    # Enable the Docker service.
    - docker:dind

# Define the stages.
stages:
  # Create a static code analysis stage.
  - analyze
  # Create an app package building stage.
  - build
  # Create an app package deploying stage.
  - deploy

ec:
  # Add to the analysis stage.
  stage: analyze
  # Use the latest ec Docker image.
  image: mstruebing/editorconfig-checker:latest
  # Check that all text complies with the EditorConfig file.
  script: ec

shfmt:
  stage: analyze
  # Use the latest Alpine Linux shfmt Docker image.
  image: mvdan/shfmt:latest-alpine
  rules:
    - changes:
        # Watch for changes in the YAMDI scripts.
        - "*.sh"
        # Watch for changes in the CI scripts.
        - "CI/*.sh"
  # Check that all Bash code has proper formatting.
  script: shfmt -d .

shellcheck:
  stage: analyze
  # Use the latest stable ShellCheck Docker image.
  image: koalaman/shellcheck-alpine:stable
  rules:
    - changes:
        - "*.sh"
        - "CI/**/*.sh"
  # Check that all Bash code is proper.
  script: shellcheck --external-sources *.sh

# Define the Docker image building template.
.docker-build:
  extends: .dind
  # Any Docker image building will be a part of the package building stage, so do so here.
  stage: build
  script:
    # If we are building for non-native architectures, create a new builder instance whose driver
    # will support multi-arch building.
    - if [ "$CI_RUNNER_EXECUTABLE_ARCH" != "$YAMDI_ARCH" ]; then docker buildx create --use; fi
    # Retrieve the date from the predefined CI datetime variable.
    - date=$(printf %s "$CI_PIPELINE_CREATED_AT" | cut -dT -f1)
    # Construct tag arguments from the specified list, with the default IFS delimiters.
    - for tag in $YAMDI_TAGS; do tag_args="$tag_args --tag $tag --tag $tag-$date"; done
    - "docker buildx --build-arg YAMDI_BASE_IMAGE=\"$YAMDI_BASE_IMAGE\" $tag_args \
      --platforms=\"$YAMDI_ARCH\" --push"

adoptopenjdk-jre16-alpine:
  extends:
    - .docker_build
  variables:
    YAMDI_BASE_IMAGE: adoptopenjdk/openjdk16:alpine-jre
    YAMDI_ARCH: linux/amd64
    YAMDI_TAGS: latest-alpine adoptopenjdk-jre16-alpine
