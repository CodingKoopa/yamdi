#!/bin/sh

# Quit on error and disallow undefined variable substitution.
set -e

# Prints a debug message, if enabled.
# Arguments:
#   - The message.
# Outputs:
#   - The formatted message.
debug() {
  if [ "$YAMDI_DEBUG" = "true" ]; then
    printf "[$(date +%R:%S) DEBUG]: [YAMDI] %s\n" "$*"
  fi
}

# Prints an info message.
# Arguments:
#   - The message.
# Outputs:
#   - The formatted message.
info() {
  printf "[$(date +%R:%S) INFO]: [YAMDI] %s\n" "$*"
}

# Prints a warning message.
# Arguments:
#   - The message.
# Outputs:
#   - The formatted message.
warning() {
  printf "[$(date +%R:%S) WARNING]: [YAMDI] %s\n" "$*"
}

# Prints an error message.
# Arguments:
#   - The message.
# Outputs:
#   - The formatted message.
error() {
  printf "[$(date +%R:%S) ERROR]: [YAMDI] %s\n" "$*"
}

# Given a resource, gets the path to its respective writable copy in the user directory.
# Arguments:
#   - The original directory, that may not be writable.
# Outputs:
#   - The corresponding user subdirectory, that should be writable.
make_user_path() {
  printf %s "$user_dir/$(basename "$1")-copy"
}

# Initializes a new temporary Git directory, makes a commit for it, and merges its contents with a
# given directory, using Git. It's very important that, if Git will be used after this function be
# called, that `unset GIT_DIR GIT_WORK_TREE` is ran. For more details on the checkout method used
# here, see: https://gitolite.com/deploy.html
# Arguments:
#   - Path to the source directory.
#   - Path to the target directory.
# Outputs:
#   - Status messages.
# Variables Exported:
#   - GIT_DIR: Location of the Git directory.
#   - GIT_WORK_TREE: Location of the Git work tree.
import_directory() {
  source_directory=$1
  target_directory=$2

  # If the directory is empty or doesn't exist. An unmounted Docker volume should be an empty
  # directory. (TODO: update this comment)
  if [ -z "$(ls -A "$source_directory")" ] || [ ! -d "$source_directory" ]; then
    warning "No files to import."
    return 0
  fi

  debug "Making copy of host files."
  source_directory_copy=$(make_user_path "$source_directory")
  # Ensure that the VCS directory isn't present to begin with, because if it is then the source
  # directory will be copied inside of the VCS directory, effectively discarding any new changes.
  rm -rf "$source_directory_copy"
  cp -R "$source_directory" "$source_directory_copy"

  debug "Initializing Git repo."
  # Use a temporary Git directory. This reduces the need for maintining a repo externally, and
  # reduces any conflict with a preexisting repo.
  export GIT_DIR="$source_directory_copy/.git-yamdi"
  # For now, use the source directory as Git's working directory, to copy the initial changes.
  export GIT_WORK_TREE="$source_directory_copy"
  # Initialize the temporary directory, if it hasn't already been initialized.
  git init -q

  debug "Making Git commit."
  # Add all files from the directory from the stage. This also stages deletions.
  git add -A
  # Remove our temporary Git directory from the stage.
  git reset -q -- "$GIT_DIR"
  # Make a commit. This is necessary because otherwise, we can't really use this repo for anything.
  # Procede even if failed because that probably just means there haven't been any configuration
  # changes.
  command="git commit -m \"Automatically generated commit.\""
  if [ "$YAMDI_DEBUG" = "true" ]; then
    eval "$command" || true
  else
    eval "$command" >/dev/null || true
  fi

  debug "Switching Git working directory to target."
  # Pull the rug out from under Git - make it use the target directory.
  export GIT_WORK_TREE="$target_directory"

  # If the directory doesn't already exist, create it, and don't show the diff.
  if [ ! -d "$target_directory" ]; then
    info "Making new directory. No changes are being overwritten."
    mkdir -p "$target_directory"
  else
    info "Existing directory found. Changes that will be overwritten:"
    # Try to condense the summary because otherwise the full contents of new additions will be
    # displayed. Right now, reverse the output, so it makes more sense.
    #
    # As of writing, the Oracle JDK 11 image is based off of Oracle Linux 7.9 [1], which ships [2]
    # Git version 1.8.3.1, and only seems to be receiving security updates. The Git developers
    # simply did not add "--compact-summary" to any release notes, but it seems [3] to have been
    # added in version 2.17.0. As such, we need to be able to fell back if --compact-summary is not
    # available.
    #
    # [1] 7.7 for the Oracle JDK 8 image.
    # [2] https://yum.oracle.com/repo/OracleLinux/OL7/latest/x86_64/index.html
    # [3] https://github.com/git/git/commit/ddf88fa6166473be15822739e0a12aad4edfbbc5
    git diff --color -R --compact-summary 2>/dev/null || git diff --color -R --summary
  fi

  debug "Updating server directory."
  # Update the directory with new changes. Procede if failed, because if no commit was made, then
  # there won't be a valid master branch to use.
  git checkout -q -f master || true
}

# Given two directories setup by import_directory(), compare them for changes.
# Arguments:
#   - Path to the source directory.
#   - Path to the target directory.
#   - Path to output the patch to.
# Outputs:
#   - Status messages.
get_directory_changes() {
  source_directory=$1
  target_directory=$2
  patch_path=$3

  GIT_DIR="$(make_user_path "$source_directory")/.git-yamdi"
  export GIT_DIR
  export GIT_WORK_TREE="$target_directory"
  if [ ! -d "$GIT_DIR" ]; then
    info "No Git repo found. No changes."
  else
    info "Git repo found. Outputting changes to \"$patch_path\"."
    git diff >"$patch_path"
  fi
  unset GIT_DIR GIT_WORK_TREE
}

# Given a minimum, maximum and "both" value, generate a JVM memory option string. If both the
# min and max and set, they will be use respectively. If only one is set, it will be used for
# both.
# Arguments:
#   - Number of minimum MB.
#   - Number of maximum MB.
#   - Number to be used for both minimum and maximum MB.
# Outputs:
#   - The generated JVM option string.
# Variables Read:
#   - YAMDI_USE_SUGGESTED_JVM_OPTS: See readme.
#   - jvm_impl: The JVM implementation.
generate_memory_opts() {
  minimum="$1"
  maximum="$2"
  both="$3"

  if [ -n "$minimum" ] && [ -z "$maximum" ]; then
    output="-Xms${minimum} -Xmx${minimum}"
  elif [ -z "$minimum" ] && [ -n "$maximum" ]; then
    output="-Xms${maximum} -Xmx${maximum}"
  elif [ -n "$both" ]; then
    output="-Xms${both} -Xmx${both}"
  else
    output="-Xms1024M -Xmx1024M"
  fi

  # See the setting of most of these options, in the main script.
  if [ ! "$YAMDI_USE_SUGGESTED_JVM_OPTS" = false ]; then
    # shellcheck disable=2154
    if [ "$jvm_impl" = "openj9" ]; then
      if [ -n "$maximum" ]; then
        upper_bound="$maximum"
      elif [ -n "$both" ]; then
        upper_bound="$both"
      else
        upper_bound="1024"
      fi
      # Strip out the letter indicating the storage unit.
      upper_bound=$(echo $upper_bound | grep -oE '[0-9]+')
      # Set the nursery minimum to 50% of the heap size from 25%, to allow more space for short
      # lived objects.
      output="$output -Xmns$(("$upper_bound" / 2))M"
      # Set the nursery maximum to 80% of the heap size to allow the server to grow it.
      output="$output -Xmnx$(("$upper_bound" * 4 / 5))M"
    fi
  fi

  echo "$output"
}

# Exits YAMDI, saving the patch for any changes that have been made to the configuration files by
# the server. If the Java process seems to have crashed, the patch will not be created.
# Arguments:
#   - The Java return code.
# Outputs:
#   - Status messages.
# Returns:
#   - The same Java return code.
# Variables Read:
#   - server_config_host_dir: Location of the mountpoint of the host's configuration
# directory.
#   - server_dir: Location of the containerized server directory.
exit_script() {
  java_ret=$1
  readonly java_ret

  info "Exiting Yet Another Minecraft Docker Image."

  if [ "$java_ret" -ne 0 ]; then
    warning "Java process return code is $java_ret, likely crashed. Not checking files for changes."
  else
    info "Java process return is 0, didn't crash. Checking files for changes."

    info "Checking server configuration files."
    get_directory_changes "$server_config_host_dir" "$server_dir" \
      "$server_dir/config.patch"
    info "Checking server plugin files."
    get_directory_changes "$server_plugins_host_dir" "$server_dir/plugins" \
      "$server_dir/plugins.patch"
  fi

  exit "$java_ret"
}

# Stops the server, and exits the script.
# Arguments:
#   - The name of the signal received.
# Outputs:
#   - Status messages.
# Variables Read:
#   - JAVA_PID: The PID of the Java process.
stop() {
  info "$1 recieved."
  if [ -n "$JAVA_PID" ]; then
    info "Server is running with PID $JAVA_PID, sending stop command."
    # Send the "stop" command to the server.
    cmd stop
    # Take over the job of quitting YAMDI, as the code at the end of this script won't be executed
    # as it normally would.
    info "Waiting for Java process to exit."
    set +e
    wait "$JAVA_PID"
    java_ret=$?
    set -e
    exit_script $java_ret
  else
    info "It looks like the server was never started. Exiting without further action."
    exit 0
  fi
}

info "Starting Yet Another Minecraft Docker Image."

# Handle the SIGINT and SIGTERM signals. SIGINT is what is normally sent to a program when Ctrl+C
# is pressed. The server handles this by quitting, without saving. SIGTERM is what is sent to a
# program when "docker stop" or "docker-compose" is used. SIGTERM is also used when an active
# Docker Compose session is quit with Ctrl+C (This does not work in regular Docker.).

# SIGINT and SIGTERM are expected to implemented similarly. The server implements them by shutting
# down the server, but without saving. The "stop" Bukkit command shuts down the server properly,
# and does save everything, so here the signals are trapped, and will intervene to run the "stop"
# command.
trap "stop SIGINT" INT
trap "stop SIGTERM" TERM

# Setup variables that are expected to be set.

# Set the directory for YAMDI data to be kept.
yamdi_dir="/opt/yamdi"
readonly yamdi_dir
# Set the directory for the server host configuration to be kept.
server_config_host_dir="$yamdi_dir/server-config-host"
readonly server_config_host_dir
# Set the directory for the server host plugins to be kept.
server_plugins_host_dir="$yamdi_dir/server-plugins-host"
readonly server_plugins_host_dir
# Set the directory for user data to be kept.
user_dir="$yamdi_dir/user"
readonly user_dir
# Set the directory for the server installation to be kept.
server_dir="$user_dir/server"
readonly server_dir
# Set the directory for the command named pipe to be.
command_input_file="/tmp/server-commmand-input"
readonly command_input_file

# Print and capture the Java version.
info "Java version:"
java_version_info=$(java -version)
readonly java_version_info
# Determine which JVM implementation this Java installation uses.
if [ "${java_version_info#*OpenJ9}" != "$java_version_info" ]; then
  jvm_impl="openj9"
else
  jvm_impl="hotspot"
fi
readonly jvm_impl

# TODO: After set -u is fixed, have this be = false.
if [ ! "$YAMDI_SKIP_VOLUME_CHECK" = true ] && [ -f $server_dir/volume-not-mounted ]; then
  error "There doesn't seem to be a Docker volume mounted to $server_dir! This means none of \
the server data will persist once this container is gone. This likely isn't want you want, exiting."
  exit 1
fi

# Remove files that aren't depended upon by any stage of this script.
if [ "$YAMDI_CLEAN_FILES" = true ]; then
  debug "Cleaning crash dumps and reports."
  # Purge crash dumps.
  rm -rf heapdump.* javacore.* Snap.*
  # Purge crash reports and logs. With Docker, we have our own logging system.
  rm -rf crash-reports logs ./*.log
fi

info "Importing server configuration files."
import_directory "$server_config_host_dir" "$server_dir"
# Ignore server properties unless explicitly told not to.
if [ ! "$YAMDI_IGNORE_SERVER_PROPERTY_CHANGES" = false ]; then
  # Allow this to fail, for the case in which we haven't setup a host config directory.
  git update-index --assume-unchanged "$server_dir/server.properties" 2>/dev/null || true
fi

if [ -d "$server_dir/plugins" ]; then
  # If we aren't doing a clean, don't go any further than the root JARs. If we do go further, then
  # JARs in subdirectories will be cleaned, mostly consisting of plugin dependency JARs.
  if [ ! "$YAMDI_CLEAN_FILES" = true ]; then
    _shallow=true
    readonly _shallow
  fi
  # Delete pre-existing JARs because, otherwise they will persist when/if new JARs are added.
  find "$server_dir/plugins" ${_shallow:+-maxdepth 1} -name "*.jar" -type f -delete
fi
info "Importing server plugin files."
import_directory "$server_plugins_host_dir" "$server_dir/plugins"

# This is necessary because of Spigot BuildTools needing to use Git.
debug "Unsetting Git variables."
unset GIT_DIR GIT_WORK_TREE

if [ -z "$YAMDI_SERVER_TYPE" ]; then
  YAMDI_SERVER_TYPE="spigot"
fi
if [ -z "$YAMDI_MINECRAFT_VERSION" ]; then
  YAMDI_MINECRAFT_VERSION="latest"
fi

if [ "$YAMDI_SERVER_TYPE" = "spigot" ]; then
  info "Spigot server selected."

  server_jar="$server_dir/spigot.jar"
  readonly server_jar
  spigot_revision_jar="$server_dir/spigot-$YAMDI_MINECRAFT_VERSION.jar"
  readonly spigot_revision_jar
  server_name="Spigot-$YAMDI_MINECRAFT_VERSION"
  readonly server_name

  # Only build a new spigot.jar if manually enabled, or if a jar for this REV does not already
  # exist.
  if [ "$FORCE_SPIGOT_REBUILD" = true ] || [ ! -f "$spigot_revision_jar" ]; then
    debug "Building $server_name."
    # Build in a temporary directory.
    spigot_build_directory=/tmp/spigot-build
    readonly spigot_build_directory
    mkdir -p "$spigot_build_directory"
    (
      cd "$spigot_build_directory"
      # Remove any preexisting JARs from failed compilations.
      rm -f BuildTools.jar
      # Download the latest BuildTools JAR.
      curl -O "https://hub.spigotmc.org/jenkins/job/BuildTools/lastSuccessfulBuild/\
artifact/target/BuildTools.jar"

      buildtools_memory_opts=$(generate_memory_opts "$YAMDI_BUILDTOOLS_MEMORY_AMOUNT_MIN" \
        "$YAMDI_BUILDTOOLS_MEMORY_AMOUNT_MAX" "$YAMDI_BUILDTOOLS_MEMORY_AMOUNT")
      readonly buildtools_memory_opts
      total_buildtools_memory_opts="$buildtools_memory_opts $YAMDI_JVM_OPTS"
      readonly total_buildtools_memory_opts

      # Run BuildTools with the specified RAM, for the specified revision.
      # shellcheck disable=SC2086
      java $total_buildtools_memory_opts -jar BuildTools.jar --rev $YAMDI_MINECRAFT_VERSION
      # Copy the Spigot build to the Spigot directory.
      cp spigot-*.jar "$spigot_revision_jar"
    )

    # Remove the build files to preserve space.
    rm -rf "$spigot_build_directory"
  else
    debug "$server_name already built."
  fi

  # Select the specified revision. In some cases, ln's -f option doesn't work.
  rm -rf "$server_jar"
  ln -s "$spigot_revision_jar" "$server_jar"

elif [ $YAMDI_SERVER_TYPE = "paper" ]; then
  info "Paper server selected."

  server_jar="$server_dir/paper.jar"
  readonly server_jar
  if [ -z "$YAMDI_PAPER_BUILD" ]; then
    YAMDI_PAPER_BUILD="latest"
  fi

  # Disable exit on error so that we can handle curl errors.
  set +e

  # Handles errrors produced by curl, by printing a common message, and exiting.
  # Outputs:
  #   - Any errors produced.
  # Returns:
  #   - Exits with 2 if any curl error has immediately occurred before this command.
  handle_curl_errors() {
    curl_ret=$?
    if [ "$curl_ret" -ne 0 ]; then
      error "Failed to connect to Paper servers. Curl error code: \"$curl_ret\""
      exit 2
    fi
  }

  # Unlike Spigot, the Paper launcher doesn't know what to do with a "latest" version, so here we
  # manually find out the latest version using the API. When we do have the latest version, if a
  # "latest" build was specified (or omitted altogether) then we have to find out that too.
  if [ "$YAMDI_MINECRAFT_VERSION" = "latest" ]; then
    debug "Resolving latest Paper revision."

    versions_json=$(curl -s https://papermc.io/api/v2/projects/$YAMDI_SERVER_TYPE)
    readonly versions_json

    handle_curl_errors
    version_json_error=$(echo "$versions_json" | jq .error)
    readonly version_json_error
    if [ ! "null" = "$version_json_error" ]; then
      error "Failed to fetch Paper versions. Curl error: \"$version_json_error\"."
      exit 2
    fi

    YAMDI_MINECRAFT_VERSION=$(echo "$versions_json" | jq .versions[-1] | sed s/\"//g)
  fi
  debug "Paper revision: \"$YAMDI_MINECRAFT_VERSION\"."

  if [ "$YAMDI_PAPER_BUILD" = "latest" ]; then
    debug "Resolving latest Paper build."
    builds_json=$(curl -s \
      "https://papermc.io/api/v2/projects/$YAMDI_SERVER_TYPE/versions/$YAMDI_MINECRAFT_VERSION")
    readonly builds_json

    handle_curl_errors
    builds_json_error=$(echo "$builds_json" | jq .error)
    readonly builds_json_error
    if [ ! "null" = "$builds_json_error" ]; then
      error "Failed to fetch Paper build info. Curl error: \"$builds_json_error\"."
      exit 2
    fi

    YAMDI_PAPER_BUILD=$(echo "$builds_json" | jq .builds[-1] | sed s/\"//g)
  fi
  debug "Paper build: \"$YAMDI_PAPER_BUILD\"."

  debug "Resolving Paper build name."
  build_json=$(curl -s "https://papermc.io/api/v2/projects/$YAMDI_SERVER_TYPE/\
versions/$YAMDI_MINECRAFT_VERSION/builds/$YAMDI_PAPER_BUILD")
  readonly build_json

  handle_curl_errors
  build_json_error=$(printf %s "$build_json" | jq .error)
  readonly builds_json_error
  if [ ! "null" = "$build_json_error" ]; then
    error "Failed to fetch Paper build info. Curl error: \"$build_json_error\"."
    exit 2
  fi

  paper_build_jar_name=$(printf %s "$build_json" | jq .downloads.application.name | sed s/\"//g)
  readonly paper_build_jar_name

  paper_revision_jar="$server_dir/\
$YAMDI_SERVER_TYPE-$YAMDI_MINECRAFT_VERSION-$YAMDI_PAPER_BUILD.jar"
  readonly paper_revision_jar
  server_name="Paper-$YAMDI_MINECRAFT_VERSION-$YAMDI_PAPER_BUILD"
  readonly server_name
  if [ ! -f "$paper_revision_jar" ]; then
    debug "Downloading $server_name."
    curl "https://papermc.io/api/v2/projects/$YAMDI_SERVER_TYPE/versions/$YAMDI_MINECRAFT_VERSION/builds/\
$YAMDI_PAPER_BUILD/downloads/$paper_build_jar_name" >"$paper_revision_jar"
    handle_curl_errors
  else
    debug "$server_name already downloaded."
  fi

  # Resume exit on error.
  set -e

  # Select the specified revision. In some cases, ln's -f option doesn't work.
  rm -rf "$server_jar"
  ln -sf "$paper_revision_jar" "$server_jar"
fi

if [ ! -f "$server_jar" ]; then
  error "Error: Server JAR not found. This could be due to a build error, or a misconfiguration."
  exit 1
fi

# Perform server JAR cleanup.
if [ "$YAMDI_CLEAN_FILES" = true ]; then
  find "$server_dir" -maxdepth 1 \
    \( -name "*.jar" ! -name "$(basename "$(readlink "$server_jar")")" \) -type f -delete
fi

# Make sure the command input file is clear.
rm -f "$command_input_file"
# Make a named pipe for sending commands to the server. The permissions 700 because, if they were
# world writeable, then any user could run a server command with administrator priviledges.
mkfifo -m700 "$command_input_file"

game_memory_opts=$(generate_memory_opts "$YAMDI_GAME_MEMORY_AMOUNT_MIN" \
  "$YAMDI_GAME_MEMORY_AMOUNT_MAX" "$YAMDI_GAME_MEMORY_AMOUNT")
readonly game_memory_opts

# Append suggested JVM options unless required not to.
if [ ! "$YAMDI_USE_SUGGESTED_JVM_OPTS" = false ]; then
  if [ "$jvm_impl" = "hotspot" ]; then
    # Set the error file path to include the server info.
    suggested_jvm_opts="$suggested_jvm_opts -XX:ErrorFile=./$server_name-error-pid%p.log"

    # Enable experimental VM features, for the options we'll be setting. Although this is not
    # listed in the documentation for "java", when I tested an experimental feature in a YAMDI
    # container, this was necessary. These options are largely taken from here:
    # https://mcflags.emc.gs/.
    suggested_jvm_opts="$suggested_jvm_opts -XX:+UnlockExperimentalVMOptions"

    # Ensure that the G1 garbage collector is enabled, because in some cases it isn't the default.
    suggested_jvm_opts="$suggested_jvm_opts -XX:+UseG1GC"
    # Don't reserve memory, because this option seems to break and cause OOM errors when running in
    # Docker.
    # suggested_jvm_opts="$suggested_jvm_opts -XX:+AlwaysPreTouch"
    # Disable explicit garbage collection, because some plugins try to manage their own memory and
    # suck at it.
    suggested_jvm_opts="$suggested_jvm_opts -XX:+DisableExplicitGC"
    # Adjust the max size of the new generation that will be set later.
    suggested_jvm_opts="$suggested_jvm_opts -XX:G1MaxNewSizePercent=80"
    # Lower the garbage collection threshold, to make cleanups not as demanding.
    suggested_jvm_opts="$suggested_jvm_opts -XX:G1MixedGCLiveThresholdPercent=35"
    # Raise the New Generation size to keep up with MC's allocations, because MC has many.
    suggested_jvm_opts="$suggested_jvm_opts -XX:G1NewSizePercent=50"
    # Take 100ms at the most to collect garbage.
    suggested_jvm_opts="$suggested_jvm_opts -XX:MaxGCPauseMillis=100"
    # Allow garbage collection to use multiple threads, for performance.
    suggested_jvm_opts="$suggested_jvm_opts -XX:+ParallelRefProcEnabled"
    # Set the garbage collection target survivor ratio higher to use more of the survivor space
    # before promoting it, because MC has steady allocations.
    suggested_jvm_opts="$suggested_jvm_opts -XX:TargetSurvivorRatio=90"
  elif [ "$jvm_impl" = "openj9" ]; then
    # These options are largely taken from here:
    # https://steinborn.me/posts/tuning-minecraft-openj9/.
    # See the utility script for the generation of the nursery limits.

    # Enable pausless garbage collection, for smaller pause times.
    suggested_jvm_opts="$suggested_jvm_opts -Xgc:concurrentScavenge"
    # Reduce the amount of time spent collecting the nursery.
    suggested_jvm_opts="$suggested_jvm_opts -Xgc:dnssExpectedTimeRatioMaximum=3"
    # Ensure that nursery objects aren't promoted to the nursery too quickly, since the server will
    # be making many of them.
    suggested_jvm_opts="$suggested_jvm_opts -Xgc:scvNoAdaptiveTenure"
    # Disable explicit garbage collection, for the same reason as in hotspot.
    suggested_jvm_opts="$suggested_jvm_opts -Xdisableexplicitgc"
  fi
else
  suggested_jvm_opts=""
fi
readonly suggested_jvm_opts

total_game_jvm_opts="$game_memory_opts $suggested_jvm_opts $YAMDI_JVM_OPTS"
readonly total_game_jvm_opts
info "Launching Java process for $server_name with JVM options \"$total_game_jvm_opts\"."
# Start the launcher with the options we've put together, while feeding it input from the named
# pipe. Execute it in the background, so we can still handle signals, and manage the "tail" process.
# shellcheck disable=SC2086
tail -f $command_input_file | java $total_game_jvm_opts -jar "$server_jar" nogui &
export JAVA_PID=$!
# Start a background subshell that we can use to monitor the background process.
(
  # Wait for the Java process to exit.
  while kill -0 $JAVA_PID 2>/dev/null; do sleep 1; done
  # Kill the "tail" process that feeds commands to the "java" process. Without doing this, if the
  # "java" process exits, then the "tail" process will continue to exist. Since we're using POSIX
  # sh, we can't use process substitution or the pipefail option to alleviate this, as recommmended
  # here (https://stackoverflow.com/a/53382807), so we need to kill it ourselves.
  #
  # The reason why we care about killing the "tail" process is that, if we don't do so, then the
  # "wait" command will wait indefinitely.
  kill "$(pidof tail)"
) &
info "Waiting for Java process (PID $JAVA_PID) to exit."
# Allow wait to return an error without making the whole script exit.
set +e
# Wait for the Java process to exit. This may seem redundant with the prior while loop; the purpose
# of this one is to capture the exit code, which is useful to determine whether the process exited
# peacefully.
wait $JAVA_PID
java_ret=$?
set -e
debug "Java process exited (return $java_ret)."
exit_script $java_ret
